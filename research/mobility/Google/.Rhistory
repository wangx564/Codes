reg_info_G = as.data.frame(read.xlsx("US State-Level Regulations_G.xlsx", sheetName = "State-Level Regulations_G"))
View(reg_info_G)
for(i in 1:length(rownames(reg_info_G))){
nname = gsub("Ã‚\\s", "", reg_info_G$State.Territory[i])
reg_info_G[i, 1] = nname
}
#change "No" to NA & notice some entries are not exact dates
for(i in 1:nrow(reg_info_G)){
for(j in 2:ncol(reg_info_G)){
if (typeof(reg_info_G[i,j]) != "double"){
reg_info_G[i,j] = format(as.Date(as.numeric(reg_info_G[i,j]), origin = "1899-12-30"), format = "%Y-%m-%d")
}
else if (typeof(reg_info_G[i,j]) == "double"){
reg_info_G[i,j] = as.character(reg_info_G[i,j])}
}
}
reg_info_G = reg_info_G %>%
mutate_all(as.character)
colnames(reg_info_G) = as.character(c("State.Territory", "State.of.Emergency", "Stay-at-Home", "Face.Coverings", "Gatherings", "Out-of-State.Travel", "Schools.Closure", "Bar&Sit-Down Restaurants.Closure", "Other.Facilities.Closure"))
S = toupper(readline(prompt = "Enter State: "))
s
S
typeof(S)
#Add Regulation Timeline to Plot
reg_info.new = reg_info_G %>%
filter(toupper(State.Territory) == "WYOMING") %>%
.[,2:ncol(reg_info_G)] %>%
mutate(Dates = rownames(.)) %>%
gather(key = "Regulation", value = "Dates", -Dates)
View(reg_info.new)
p1 + geom_vline(data = reg_info.new, mapping = aes(xintercept = as.POSIXct(reg_info.new[, 2], tz = "UTC"), colour = Regulation), size = 0.7, show.legend = TRUE)
p1
p3 = p1 + geom_vline(data = reg_info.new, mapping = aes(xintercept = as.POSIXct(reg_info.new[, 2], tz = "UTC")), size = 0.7, show.legend = TRUE)
p3
p3 = p1 + geom_vline(data = reg_info.new, mapping = aes(xintercept = as.POSIXct(reg_info.new[, 2], tz = "UTC"), colour = Regulation), size = 0.7)
p3
as.POSIXct(reg_info.new[, 2], tz = "UTC")
p3 = p1 + geom_vline(data = reg_info.new, mapping = aes(xintercept = as.POSIXct(reg_info.new[, 2], tz = "UTC")))
p3
reg_info.new[, 2]
p1 + geom_vline(data = reg_info.new, mapping = aes(xintercept = reg_info.new[, 2], colour = Regulation), size = 0.7, show.legend = TRUE)
p1 + geom_vline(data = reg_info.new, mapping = aes(xintercept = as.character(reg_info.new[, 2]), colour = Regulation), size = 0.7, show.legend = TRUE)
as.character(reg_info.new[, 2])
as.vector(as.character(reg_info.new[, 2]))
p1 + geom_vline(data = reg_info.new, mapping = aes(xintercept = as.vector(as.character(reg_info.new[, 2])), colour = Regulation), size = 0.7, show.legend = TRUE)
pd_wk = pd_wk %>%
select(names(pd_wk)[3:ncol(pd_wk)]) %>%
gather(key = "Places", value = "Value", -date) %>%
as.Date(date)
View(pd_wk)
pd_wk = pd_wk %>%
select(names(pd_wk)[3:ncol(pd_wk)]) %>%
gather(key = "Places", value = "Value", -date) %>%
as.Date(.$date)
pd_wk$date = as.Date(pd_wk$date)
pd_wk = pd_wk %>%
select(names(pd_wk)[3:ncol(pd_wk)]) %>%
gather(key = "Places", value = "Value", -date)
pd_wk = pd
for (i in 4:ncol(pd_wk)){
pd_wk[, i] = SMA(pd_wk[, i], n = 7)
}
pd_wk = na.omit(pd_wk)
pd_wk = pd_wk %>%
select(names(pd_wk)[3:ncol(pd_wk)]) %>%
gather(key = "Places", value = "Value", -date)
pd_wk$date = as.Date(pd_wk$date)
pd_mth = pd
for (i in 4:ncol(pd_mth)){
pd_mth[, i] = SMA(pd_mth[, i], n = 30)
}
pd_mth = na.omit(pd_mth)
pd_mth = pd_mth %>%
select(names(pd_mth)[3:ncol(pd_mth)]) %>%
gather(key = "Places", value = "Value", -date)
pd_mth$date = as.Date(pd_mth$date)
p1 = ggplot(pd_wk , aes(x = date, y = Value)) + geom_line(aes(color = Places), size = 0.5) + xlab("") + ylab("Mobility (% change)") + ggtitle("Adjusted %Change of Mobility in WYOMING (n = 7)") + theme_minimal()
p1 = p1 + theme(axis.text.x = element_text(angle = 45, hjust = 1)) + scale_x_date(date_labels = "%y %b %d") + geom_hline(yintercept = 0, linetype = "dashed")
p2 = ggplot(pd_mth, aes(x = date, y = Value)) + geom_line(aes(color = Places), size = 0.5) + xlab("") + ylab("Mobility (% change)") + ggtitle("%Change of Mobility in WYOMING (n = 30)") + theme_minimal()
p2 = p2 + theme(axis.text.x = element_text(angle = 45, hjust = 1)) + scale_x_date(date_labels = "%y %b %d") + geom_hline(yintercept = 0, linetype = "dashed")
p1 + geom_vline(data = reg_info.new, mapping = aes(xintercept = as.POSIXct(reg_info.new[, 2], tz = "UTC"), colour = Regulation), size = 0.7, show.legend = TRUE)
View(reg_info.new)
reg_info.new$Dates = as.Date(reg_info.new$Dates)
p3 = p1 + geom_vline(data = reg_info.new, mapping = aes(xintercept = reg_info.new$Dates, colour = Regulation), size = 0.7, show.legend = TRUE)
p3
ncol(reg_info.new)
shadesOfGrey = colorRampPalette(c("grey0", "grey100"))
shadesOfGrey = colorRampPalette(c("grey0", "grey100"))
p3 = p1 + geom_vline(data = reg_info.new, mapping = aes(xintercept = reg_info.new$Dates, colour = shadesOfGrey(nrow(reg_info.new))), size = 0.7, show.legend = TRUE)
p3
shadesOfGrey = colorRampPalette(c("grey0", "grey100"))
p3 = p1 + geom_vline(data = reg_info.new, mapping = aes(xintercept = Dates, colour = shadesOfGrey(nrow(reg_info.new))), size = 0.7, show.legend = TRUE)
p3
p3 = p1 + geom_vline(data = reg_info.new, mapping = aes(xintercept = Dates, colour = Regukation), size = 0.7, show.legend = TRUE)
p3
p3 = p1 + geom_vline(data = reg_info.new, mapping = aes(xintercept = Dates, colour = Regulation), size = 0.7, show.legend = TRUE)
p3
p4 = p2 + geom_vline(data = reg_info.new, mapping = aes(xintercept = Dates, colour = Regulation), size = 0.7, show.legend = TRUE)
p4
p3
unique(pd_wk$Places)
shadesOfGrey(length(unique(pd_wk$Places)))
color
shadesOfGrey <- colorRampPalette(c("grey0", "grey100"))
col = shadesOfGrey(length(unique(pd_wk$Places)))
p1 = ggplot(pd_wk , aes(x = date, y = Value)) + geom_line(aes(color = col), size = 0.5) + xlab("") + ylab("Mobility (% change)") + ggtitle("Adjusted %Change of Mobility in WYOMING (n = 7)") + theme_minimal()
p1
shadesOfGrey(nrow(reg_info.new))
shadesOfGrey(nrow(na.omit(reg_info.new)))
p3 = p1 + geom_vline(data = reg_info.new, mapping = aes(xintercept = Dates, colour = col), size = 0.7, show.legend = TRUE)
p3
shadesOfGrey = colorRampPalette(c("grey0", "grey100"))
col = shadesOfGrey(nrow(reg_info.new))
p1 + geom_vline(data = reg_info.new, mapping = aes(xintercept = Dates, colour = col), size = 0.7, show.legend = TRUE)
shadesOfGrey = colorRampPalette(c("grey0", "grey100"))
col = shadesOfGrey(nrow(reg_info.new))
col
shadesOfGrey = colorRampPalette(c("grey0", "grey100"))
col = shadesOfGrey(nrow(reg_info.new))
p3 = p1 + geom_vline(data = reg_info.new, mapping = aes(xintercept = Dates, colour = factor(colors)), size = 0.7, show.legend = TRUE) + scale_color_manual(values = col)
p3
length(reg_info.new)
shadesOfGrey = colorRampPalette(c("grey0", "grey100"))
col = shadesOfGrey(2)
p3 = p1 + geom_vline(data = reg_info.new, mapping = aes(xintercept = Dates, colour = factor(colors)), size = 0.7, show.legend = TRUE) + scale_color_manual(values = col)
p3
p3 = p1 + geom_vline(data = reg_info.new, mapping = aes(xintercept = Dates, colour = Regulation), size = 0.7, show.legend = TRUE)
p4 = p2 + geom_vline(data = reg_info.new, mapping = aes(xintercept = Dates, colour = Regulation), size = 0.7, show.legend = TRUE)
p3
#Add Regulation Timeline to Plot
reg_info.new = reg_info_G %>%
filter(toupper(State.Territory) == "WYOMING") %>%
.[,2:ncol(reg_info_G)] %>%
mutate(Dates = rownames(.)) %>%
gather(key = "Regulation", value = "Dates", -Dates)
reg_info.new$Dates = as.Date(reg_info.new$Dates)
p3 = p1 + geom_vline(data = reg_info.new, mapping = aes(xintercept = Dates, colour = Regulation), size = 0.7, show.legend = TRUE)
p4 = p2 + geom_vline(data = reg_info.new, mapping = aes(xintercept = Dates, colour = Regulation), size = 0.7, show.legend = TRUE)
p3
#Plot State-Level Data
pd = dat_G_USA[c(2:4, 8:ncol(dat_G_USA))] %>%
subset(is.na(sub_region_2) == TRUE) %>%
select(-sub_region_2) %>%
na.omit()
#use SMA (n = 7)
pd_wk = pd
for (i in 4:ncol(pd_wk)){
pd_wk[, i] = SMA(pd_wk[, i], n = 7)
}
pd_wk = na.omit(pd_wk)
#use SMA (n = 30)
pd_mth = pd
for (i in 4:ncol(pd_mth)){
pd_mth[, i] = SMA(pd_mth[, i], n = 30)
}
pd_mth = na.omit(pd_mth)
#plot
pd_wk = pd_wk %>%
select(names(pd_wk)[3:ncol(pd_wk)]) %>%
gather(key = "Places", value = "Value", -date)
pd_wk$date = as.Date(pd_wk$date)
pd_mth = pd_mth %>%
select(names(pd_mth)[3:ncol(pd_mth)]) %>%
gather(key = "Places", value = "Value", -date)
pd_mth$date = as.Date(pd_mth$date)
p1 = ggplot(pd_wk , aes(x = date, y = Value)) + geom_line(aes(color = Places), size = 0.5) + xlab("") + ylab("Mobility (% change)") + ggtitle("Adjusted %Change of Mobility in WYOMING (n = 7)") + theme_minimal()
p1 = p1 + theme(axis.text.x = element_text(angle = 45, hjust = 1)) + scale_x_date(date_labels = "%y %b %d") + geom_hline(yintercept = 0, linetype = "dashed")
p2 = ggplot(pd_mth, aes(x = date, y = Value)) + geom_line(aes(color = Places), size = 0.5) + xlab("") + ylab("Mobility (% change)") + ggtitle("%Change of Mobility in WYOMING (n = 30)") + theme_minimal()
p2 = p2 + theme(axis.text.x = element_text(angle = 45, hjust = 1)) + scale_x_date(date_labels = "%y %b %d") + geom_hline(yintercept = 0, linetype = "dashed")
#Add Regulation Timeline to Plot
reg_info.new = reg_info_G %>%
filter(toupper(State.Territory) == "WYOMING") %>%
.[,2:ncol(reg_info_G)] %>%
mutate(Dates = rownames(.)) %>%
gather(key = "Regulation", value = "Dates", -Dates)
reg_info.new$Dates = as.Date(reg_info.new$Dates)
p3 = p1 + geom_vline(data = reg_info.new, mapping = aes(xintercept = Dates, colour = Regulation), size = 0.7, show.legend = TRUE)
p4 = p2 + geom_vline(data = reg_info.new, mapping = aes(xintercept = Dates, colour = Regulation), size = 0.7, show.legend = TRUE)
p3
p4
p3 + scale_color_manual(values = c("#E7B800", "#2E9FDF", "#FC4E07"))
p3
p3+scale_x_discrete(limits=c("State.Territory", "State.of.Emergency", "Stay-at-Home", "Face.Coverings", "Gatherings", "Out-of-State.Travel", "Schools.Closure", "Bar&Sit-Down Restaurants.Closure", "Other.Facilities.Closure"))
p3 + scale_x_discrete(limits=c("Retail&Recreation", "Grocery&Pharmacy", "Parks", "Transit.Stations", "Workplaces", "Residential"))
p3 = p1 + geom_vline(data = reg_info.new, mapping = aes(xintercept = Dates), size = 0.7, show.legend = TRUE)
p3
p3+
scale_color_manual(values = c("#E7B800", "#2E9FDF", "#FC4E07"))
View(shadesOfGrey)
shadesOfGrey(6)
p3 + scale_color_manual(values = shadesOfGrey(6))
p3
p3 = p1 + geom_vline(xintercept = reg_info.new$Dates, colour = shadesOfGrey(6), size = 0.7, show.legend = TRUE)
p3
p1 + geom_vline(xintercept = reg_info.new$Dates, colour = shadesOfGrey(8), size = 0.7, show.legend = TRUE)
p3 = p1 + geom_vline(xintercept = reg_info.new$Dates, colour = shadesOfGrey(8), size = 0.7, show.legend = TRUE)
p3
nrow(reg_info.new)
p3 = p1 + geom_vline(xintercept = reg_info.new$Dates, colour = shadesOfGrey(nrow(reg_info.new)), size = 0.7, show.legend = TRUE)
p3
shadesOfGrey = colorRampPalette(c("grey0", "grey70"))
p3 = p1 + geom_vline(xintercept = reg_info.new$Dates, colour = shadesOfGrey(nrow(reg_info.new)), size = 0.7, show.legend = TRUE)
p3
p1 + geom_vline(mapping = aes(xintercept = reg_info.new$Dates, colour = shadesOfGrey(nrow(reg_info.new))), size = 0.7, show.legend = TRUE)
p1 + geom_vline(mapping = aes(xintercept = reg_info.new$Dates, colour = shadesOfGrey(930)), size = 0.7, show.legend = TRUE)
p2 + geom_vline(xintercept = reg_info.new$Dates, colour = shadesOfGrey(nrow(reg_info.new)), size = 0.7, linetype="dashed") +
scale_color_manual(name = "Regulation", values = c(c(reg_info.new$Regulation) = shadesOfGrey(nrow(reg_info.new))))
p2 + geom_vline(xintercept = reg_info.new$Dates, colour = shadesOfGrey(nrow(reg_info.new)), size = 0.7, linetype="dashed") +
scale_color_manual(name = "Regulation")
p2 + geom_vline(xintercept = reg_info.new$Dates, colour = shadesOfGrey(nrow(reg_info.new)), size = 0.7, linetype="dashed") +
scale_color_manual(name = "Regulation", values = c(median = "blue", mean = "red"))
p2 + geom_vline(xintercept = reg_info.new$Dates, colour = shadesOfGrey(nrow(reg_info.new)), size = 0.7, linetype="dashed") +
scale_color_manual(name = "Regulation", values = c(m = "blue", me = "red", mee = "orange", mwm = "pink", aa = "yellow", bb = "purple"))
p3 = p1 + geom_vline(xintercept = reg_info.new$Dates, colour = shadesOfGrey(nrow(reg_info.new)), size = 0.7, linetype="dashed")
p4 = p2 + geom_vline(xintercept = reg_info.new$Dates, colour = shadesOfGrey(nrow(reg_info.new)), size = 0.7, linetype="dashed")
p1 + geom_vline(xintercept = reg_info.new$Dates, colour = shadesOfGrey(nrow(reg_info.new)), size = 0.7, linetype="dashed") + geom_text(data = reg_info.new, mapping = aes(x = Dates, y = 0, label = Regulation))
p1 + geom_vline(xintercept = reg_info.new$Dates, colour = shadesOfGrey(nrow(reg_info.new)), size = 0.7, linetype="dashed") + geom_text(data = reg_info.new, mapping = aes(x = Dates, y = 0, label = Regulation), angle = 90, size = 0.5)
p1 + geom_vline(xintercept = reg_info.new$Dates, colour = shadesOfGrey(nrow(reg_info.new)), size = 0.7, linetype="dashed") + geom_text(data = reg_info.new, mapping = aes(x = Dates, y = 0, label = Regulation), angle = 90, size = 1)
p1 + geom_vline(xintercept = reg_info.new$Dates, colour = shadesOfGrey(nrow(reg_info.new)), size = 0.7, linetype="dashed") + geom_text(data = reg_info.new, mapping = aes(x = Dates, y = 0, label = Regulation), angle = 90, size =2)
p1 + geom_vline(xintercept = reg_info.new$Dates, colour = shadesOfGrey(nrow(reg_info.new)), size = 0.7, linetype="dashed") + geom_text(data = reg_info.new, mapping = aes(x = Dates, y = 0, label = Regulation), angle = 90, size = 5)
p1 + geom_vline(xintercept = reg_info.new$Dates, colour = shadesOfGrey(nrow(reg_info.new)), size = 0.7, linetype="dashed") + geom_text(data = reg_info.new, mapping = aes(x = Dates, y = 0, label = Regulation), angle = 90, size = 3)
p1 + geom_vline(xintercept = reg_info.new$Dates, colour = shadesOfGrey(nrow(reg_info.new)), size = 0.7, linetype="dashed") + geom_text(data = reg_info.new, mapping = aes(x = Dates, y = 0, label = Regulation), angle = 90, size = 2)
p1 + geom_vline(xintercept = reg_info.new$Dates, colour = shadesOfGrey(nrow(reg_info.new)), size = 0.7, linetype="dashed") + geom_text(data = reg_info.new, mapping = aes(x = Dates, y = 0, label = Regulation), angle = 90, size = 1.5)
p4 = p2 + geom_vline(xintercept = reg_info.new$Dates, colour = shadesOfGrey(nrow(reg_info.new)), size = 0.7, linetype="dashed") + geom_text(data = reg_info.new, mapping = aes(x = Dates, y = 0, label = Regulation), angle = 90, size = 1.5)
p4
p4 = p2 + geom_vline(xintercept = reg_info.new$Dates, colour = shadesOfGrey(nrow(reg_info.new)), size = 0.7, linetype="dashed") + geom_text(data = reg_info.new, mapping = aes(x = Dates, y = 0, label = Regulation), angle = 90, size = 1.5)
p4
p3 = p1 + geom_vline(xintercept = reg_info.new$Dates, colour = shadesOfGrey(nrow(reg_info.new)), size = 0.7, linetype="dashed") + geom_text(data = reg_info.new, mapping = aes(x = Dates, y = 100, label = Regulation), angle = 90, size = 1.5)
p4 = p2 + geom_vline(xintercept = reg_info.new$Dates, colour = shadesOfGrey(nrow(reg_info.new)), size = 0.7, linetype="dashed") + geom_text(data = reg_info.new, mapping = aes(x = Dates, y = 100, label = Regulation), angle = 90, size = 1.5)
p3
p3 = p1 + geom_vline(xintercept = reg_info.new$Dates, colour = shadesOfGrey(nrow(reg_info.new)), size = 0.7, linetype="dashed") + geom_text(data = reg_info.new, mapping = aes(x = Dates, y = 100, label = Regulation), angle = 90, size = 2)
p4 = p2 + geom_vline(xintercept = reg_info.new$Dates, colour = shadesOfGrey(nrow(reg_info.new)), size = 0.7, linetype="dashed") + geom_text(data = reg_info.new, mapping = aes(x = Dates, y = 100, label = Regulation), angle = 90, size = 2)
p3
p4
p4 = p2 + geom_vline(xintercept = reg_info.new$Dates, colour = shadesOfGrey(nrow(reg_info.new)), size = 0.7, linetype="dashed") + geom_text(data = reg_info.new, mapping = aes(x = Dates, y = 100, label = Regulation), angle = 90, size = 5)
p4
p3 = p1 + geom_vline(xintercept = reg_info.new$Dates, colour = shadesOfGrey(nrow(reg_info.new)), size = 0.7, linetype="dashed") + geom_text(data = reg_info.new, mapping = aes(x = Dates, y = 100, label = Regulation), angle = 90, size = 4)
p4 = p2 + geom_vline(xintercept = reg_info.new$Dates, colour = shadesOfGrey(nrow(reg_info.new)), size = 0.7, linetype="dashed") + geom_text(data = reg_info.new, mapping = aes(x = Dates, y = 100, label = Regulation), angle = 90, size = 4)
p3
p4
# Load the packages
packages = c("xlsx", "tidyverse", "viridis", "forecast", "fpp", "ggfortify", "zoo", "xts", "forecast", "TTR")
#install.packages(packages)
lapply(packages, library, character.only = TRUE)
sd = dat_G_USA %>%
filter(!is.na(sub_region_2)) %>%
select(date, sub_region_2, Parks) %>%
na.omit()
sd$date = as.Date(sd$date)
sd = sd[1:6,]
sd = dat_G_USA %>%
filter(!is.na(sub_region_2)) %>%
select(date, sub_region_2, Parks) %>%
na.omit()
sd$date = as.Date(sd$date)
view(sd[1:7,])
sd = sd[1:6,]
sd = dat_G_USA %>%
filter(!is.na(sub_region_2)) %>%
select(date, sub_region_2, Parks) %>%
na.omit()
sd$date = as.Date(sd$date)
sd = sd[1:7,]
#plot change in mobility to parks for counties in State Wyoming
sd = dat_G_USA %>%
filter(!is.na(sub_region_2)) %>%
select(date, sub_region_2, Parks) %>%
na.omit()
sd$date = as.Date(sd$date)
#deseasonalize each county
a = 1
i = 1
while (i <= nrow(sd)){
j = a #starting index
S = sd$sub_region_2[a]
if (sd$sub_region_2[i] != S){
k = i - 1 #end index
n = k-j+1
if (n >= 7){
sd$Parks[j:k] = SMA(sd$Parks[j:k], n = 7)
a = i
print(c(j,k))
}
}
i = i + 1
}
sd = dat_G_USA %>%
filter(!is.na(sub_region_2)) %>%
select(date, sub_region_2, Parks) %>%
na.omit()
sd$date = as.Date(sd$date)
sd = sd[1:7,]
a = 1
i = 1
while (i <= nrow(sd)){
j = a #starting index
S = sd$sub_region_2[a]
if (sd$sub_region_2[i] != S){
k = i - 1 #end index
n = k-j+1
if (n >= 7){
sd$Parks[j:k] = SMA(sd$Parks[j:k], n = 7)
a = i
print(c(j,k))
}
}
i = i + 1
}
sd = dat_G_USA %>%
filter(!is.na(sub_region_2)) %>%
select(date, sub_region_2, Parks) %>%
na.omit()
sd$date = as.Date(sd$date)
a = 1
i = 1
while (i <= nrow(sd)){
j = a #starting index
S = sd$sub_region_2[a]
if (sd$sub_region_2[i] != S){
k = i - 1 #end index
a = i
n = k-j+1
if (n >= 7){
sd$Parks[j:k] = SMA(sd$Parks[j:k], n = 7)
print(c(j,k))
}
}
i = i + 1
}
nrow(sd)
sd$sub_region_2[nrow(sd)]
d$Parks[2:]
#plot change in mobility to parks for counties in State Wyoming
sd = dat_G_USA %>%
filter(!is.na(sub_region_2)) %>%
select(date, sub_region_2, Parks) %>%
na.omit()
sd$date = as.Date(sd$date)
#sd = sd[1:7,]
#deseasonalize each county
a = 1
i = 1
while (i <= nrow(sd)){
j = a #starting index
S = sd$sub_region_2[a]
if ((sd$sub_region_2[i] != S) & isFALSE(S == sd$sub_region_2[nrow(sd)])){
k = i - 1 #end index
a = i
n = k-j+1
if (n >= 7){
sd$Parks[j:k] = SMA(sd$Parks[j:k], n = 7)
}
}
else if (S == sd$sub_region_2[nrow(sd)]){
k = nrow(sd)
i = k
n = k-j+1
if (n >= 7){
sd$Parks[j:nrow(sd)] = SMA(sd$Parks[j:nrow(sd)], n = 7)
}
}
i = i + 1
}
View(sd)
sd = na.omit(sd)
p5 = ggplot(sd, aes(x = date, y = Parks)) + geom_line(aes(color = sub_region_2), size = 0.5) + xlab("") + ylab("Mobility (% change)") + ggtitle("%Change of Mobility in WYOMING Counties (n = 7)") + theme_minimal()
p5
colnames(sd) = c(date, County, Parks)
colnames(sd) = c("date", "County", "Parks")
#plot change in mobility to parks for counties in State Wyoming
sd = dat_G_USA %>%
filter(!is.na(sub_region_2)) %>%
select(date, sub_region_2, Parks) %>%
na.omit()
sd$date = as.Date(sd$date)
colnames(sd) = c("date", "County", "Parks")
#deseasonalize each county
a = 1
i = 1
while (i <= nrow(sd)){
j = a #starting index
S = sd$sub_region_2[a]
if ((sd$sub_region_2[i] != S) & isFALSE(S == sd$sub_region_2[nrow(sd)])){
k = i - 1 #end index
a = i
n = k-j+1
if (n >= 7){
sd$Parks[j:k] = SMA(sd$Parks[j:k], n = 7)
}
}
else if (S == sd$sub_region_2[nrow(sd)]){
k = nrow(sd)
i = k
n = k-j+1
if (n >= 7){
sd$Parks[j:nrow(sd)] = SMA(sd$Parks[j:nrow(sd)], n = 7)
}
}
i = i + 1
}
sd = dat_G_USA %>%
filter(!is.na(sub_region_2)) %>%
select(date, sub_region_2, Parks) %>%
na.omit()
sd$date = as.Date(sd$date)
colnames(sd) = c("date", "County", "Parks")
View(sd)
#Plot State-Level Data
pd = dat_G_USA[c(2:4, 8:ncol(dat_G_USA))] %>%
subset(is.na(sub_region_2) == TRUE) %>%
select(-sub_region_2) %>%
na.omit()
#use SMA (n = 7)
pd_wk = pd
for (i in 4:ncol(pd_wk)){
pd_wk[, i] = SMA(pd_wk[, i], n = 7)
}
pd_wk = na.omit(pd_wk)
#use SMA (n = 30)
pd_mth = pd
for (i in 4:ncol(pd_mth)){
pd_mth[, i] = SMA(pd_mth[, i], n = 30)
}
pd_mth = na.omit(pd_mth)
#plot
pd_wk = pd_wk %>%
select(names(pd_wk)[3:ncol(pd_wk)]) %>%
gather(key = "Places", value = "Value", -date)
pd_wk$date = as.Date(pd_wk$date)
pd_mth = pd_mth %>%
select(names(pd_mth)[3:ncol(pd_mth)]) %>%
gather(key = "Places", value = "Value", -date)
pd_mth$date = as.Date(pd_mth$date)
p1 = ggplot(pd_wk , aes(x = date, y = Value)) + geom_line(aes(color = Places), size = 0.5) + xlab("") + ylab("Mobility (% change)") + ggtitle("Adjusted %Change of Mobility in WYOMING (n = 7)") + theme_minimal()
p1 = p1 + theme(axis.text.x = element_text(angle = 45, hjust = 1)) + scale_x_date(date_labels = "%y %b %d") + geom_hline(yintercept = 0, linetype = "dashed") + geom_hline(yintercept = 0, size = 1, linetype = "dashed", colour = "Red")
p2 = ggplot(pd_mth, aes(x = date, y = Value)) + geom_line(aes(color = Places), size = 0.5) + xlab("") + ylab("Mobility (% change)") + ggtitle("%Change of Mobility in WYOMING (n = 30)") + theme_minimal()
p2 = p2 + theme(axis.text.x = element_text(angle = 45, hjust = 1)) + scale_x_date(date_labels = "%y %b %d") + geom_hline(yintercept = 0, linetype = "dashed") + geom_hline(yintercept = 0, size = 1, linetype = "dashed", colour = "Red")
#plot change in mobility to parks for counties in State Wyoming
sd = dat_G_USA %>%
filter(!is.na(sub_region_2)) %>%
select(date, sub_region_2, Parks) %>%
na.omit()
sd$date = as.Date(sd$date)
colnames(sd) = c("date", "County", "Parks")
#deseasonalize each county
a = 1
i = 1
while (i <= nrow(sd)){
j = a #starting index
S = sd$County[a]
if ((sd$County[i] != S) & isFALSE(S == sd$County[nrow(sd)])){
k = i - 1 #end index
a = i
n = k-j+1
if (n >= 7){
sd$Parks[j:k] = SMA(sd$Parks[j:k], n = 7)
}
}
else if (S == sd$County[nrow(sd)]){
k = nrow(sd)
i = k
n = k-j+1
if (n >= 7){
sd$Parks[j:nrow(sd)] = SMA(sd$Parks[j:nrow(sd)], n = 7)
}
}
i = i + 1
}
#plot
sd = na.omit(sd)
p5 = ggplot(sd, aes(x = date, y = Parks)) + geom_line(aes(color = County), size = 0.5) + xlab("") + ylab("Mobility (% change)") + ggtitle("%Change of Mobility in WYOMING Counties (n = 7)") + theme_minimal()
p5
reg_info_G = as.data.frame(read.xlsx("US State-Level Regulations_G.xlsx", sheetName = "State-Level Regulations_G"))
for(i in 1:length(rownames(reg_info_G))){
nname = gsub("Ã‚\\s", "", reg_info_G$State.Territory[i])
reg_info_G[i, 1] = nname
}
#change "No" to NA & notice some entries are not exact dates
for(i in 1:nrow(reg_info_G)){
for(j in 2:ncol(reg_info_G)){
if (typeof(reg_info_G[i,j]) != "double"){
reg_info_G[i,j] = format(as.Date(as.numeric(reg_info_G[i,j]), origin = "1899-12-30"), format = "%Y-%m-%d")
for(i in 1:length(rownames(reg_info_G))){
nname = gsub("Ã‚\\s", "", reg_info_G$State.Territory[i])
reg_info_G[i, 1] = nname
}
#change "No" to NA & notice some entries are not exact dates
for(i in 1:nrow(reg_info_G)){
for(j in 2:ncol(reg_info_G)){
if (typeof(reg_info_G[i,j]) != "double"){
reg_info_G[i,j] = format(as.Date(as.numeric(reg_info_G[i,j]), origin = "1899-12-30"), format = "%Y-%m-%d")
}
else if (typeof(reg_info_G[i,j]) == "double"){
reg_info_G[i,j] = as.character(reg_info_G[i,j])}
}
}
reg_info_G = reg_info_G %>%
mutate_all(as.character)
colnames(reg_info_G) = as.character(c("State.Territory", "State.of.Emergency", "Stay-at-Home", "Face.Coverings", "Gatherings", "Out-of-State.Travel", "Schools.Closure", "Bar&Sit-Down Restaurants.Closure", "Other.Facilities.Closure"))
reg_info.new = reg_info_G %>%
filter(toupper(State.Territory) == "WYOMING") %>%
.[,2:ncol(reg_info_G)] %>%
mutate(Dates = rownames(.)) %>%
gather(key = "Regulation", value = "Dates", -Dates)
reg_info.new$Dates = as.Date(reg_info.new$Dates)
p6 = p5 + geom_vline(xintercept = reg_info.new$Dates, colour = shadesOfGrey(nrow(reg_info.new)), size = 0.7, linetype = "dashed") + geom_text(data = reg_info.new, mapping = aes(x = Dates, y = 100, label = Regulation), angle = 90, size = 4) + geom_hline(yintercept = 0, size = 1, linetype = "dashed", colour = "Red")
)
p5
p6 = p5 + geom_vline(xintercept = reg_info.new$Dates, colour = shadesOfGrey(nrow(reg_info.new)), size = 0.7, linetype = "dashed") + geom_text(data = reg_info.new, mapping = aes(x = Dates, y = 100, label = Regulation), angle = 90, size = 4) + geom_hline(yintercept = 0, size = 1, linetype = "dashed", colour = "Red")
p6
p6 = p5 + geom_vline(xintercept = reg_info.new$Dates, colour = shadesOfGrey(nrow(reg_info.new)), size = 1, linetype = "dashed") + geom_text(data = reg_info.new, mapping = aes(x = Dates, y = 100, label = Regulation), angle = 90, size = 3) + geom_hline(yintercept = 0, size = 1, linetype = "dashed", colour = "Red")
p6
